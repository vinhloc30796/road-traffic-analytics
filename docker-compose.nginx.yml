version: "3.6"

services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /apps/docker-articles/nginx/vhost.d:/etc/nginx/vhost.d
      - /apps/docker-articles/nginx/certs:/etc/nginx/certs:ro
      - /apps/docker-articles/nginx/html:/usr/share/nginx/html
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /apps/docker-articles/nginx/vhost.d:/etc/nginx/vhost.d
      - /apps/docker-articles/nginx/certs:/etc/nginx/certs:rw
      - /apps/docker-articles/nginx/html:/usr/share/nginx/html
    depends_on:
      - nginx-proxy
  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          security:
            default-group: no-roles
            basic-auth:
              - username: ${AKHQ_USER}
                password: "$$2a$$12$$jy2HIgMblEjqBxv.TYWWAegSjtXZeDJiez8.bOObMLhD18LfEuQU2"
                passwordHash: BCRYPT
                groups:
                - admin
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:29092"
              schema-registry:
                url: "http://schema-registry:8084"
        micronaut:
          security:
            enabled: true
      VIRTUAL_HOST: akhq.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_HOST: akhq.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_EMAIL: kevin.fairise@student-cs.fr
    ports:
      - 9000:8080
    links:
      - kafka
      - schema-registry
  zookeeper:
    image: "bitnami/zookeeper:3.8"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: "bitnami/kafka:3.3"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_SCHEMA_REGISTRY_URL=http://schema-registry:8084
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  schema-registry:
    image: "confluentinc/cp-schema-registry"
    ports:
      - 8084:8084
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:2181
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:29092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8084
      - SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL=PLAINTEXT
    depends_on:
      - zookeeper
      - kafka
  ## Druid services
  postgres:
    container_name: postgres
    image: postgres:latest
    volumes:
      - metadata_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=FoolishPassword
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
  coordinator:
    build: ./docker
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - .env-druid

  broker:
    build: ./docker
    container_name: broker
    volumes:
      - broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - .env-druid

  historical:
    build: ./docker
    container_name: historical
    volumes:
      - druid_shared:/opt/shared
      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - .env-druid

  middlemanager:
    build: ./docker
    container_name: middlemanager
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - .env-druid

  router:
    build: ./docker
    container_name: router
    volumes:
      - router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - .env-druid
    environment:
      VIRTUAL_HOST: druid.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_HOST: druid.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_EMAIL: kevin.fairise@student-cs.fr
  ## Superset services
  redis:
    image: redis:latest
    container_name: superset_cache
    volumes:
      - redis:/data

  db:
    env_file: .env-superset
    image: postgres:10
    container_name: superset_db
    volumes:
      - db_home:/var/lib/postgresql/data

  superset:
    env_file: .env-superset
    image: apache/superset:latest
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    user: "root"
    ports:
      - 8088:8088
    depends_on: 
      - db
      - redis
    volumes: 
      - ./docker/superset:/app/docker
      - superset_home:/app/superset_home
    environment:
      VIRTUAL_HOST: superset.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_HOST: superset.cs-road-traffic-analytics-dev.illuin-tech.com
      LETSENCRYPT_EMAIL: kevin.fairise@student-cs.fr

  superset-init:
    image: apache/superset:latest
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file: .env-superset
    depends_on: 
      - db
      - redis
    user: "root"
    volumes: 
      - ./docker/superset:/app/docker
      - superset_home:/app/superset_home

  superset-worker:
    image: apache/superset:latest
    container_name: superset_worker
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    env_file: .env-superset
    depends_on: 
      - db
      - redis
    user: "root"
    volumes: 
      - ./docker/superset:/app/docker
      - superset_home:/app/superset_home

  superset-worker-beat:
    image: apache/superset:latest
    container_name: superset_worker_beat
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    env_file: .env-superset
    depends_on: 
      - db
      - redis
    user: "root"
    volumes: 
      - ./docker/superset:/app/docker
      - superset_home:/app/superset_home
volumes:
  conf:
  vhost:
  html:
  dhparam:
  certs:
  acme:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
